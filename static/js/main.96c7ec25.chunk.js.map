{"version":3,"sources":["Example.js","App.js","registerServiceWorker.js","index.js"],"names":["style","container","display","flexDirection","flexWrap","justifyContent","alignItems","outline","panel","flex","height","margin","overflowY","button","code","whiteSpace","fontSize","Example","_this","this","_this$props","props","length","radius","renderMap","renderMapString","concat","react_default","a","createElement","onClick","view","scrollTo","peripheral_view_default","ref","r","Component","App","randomHeights","Array","i","Math","round","random","setState","state","src_Example","key","Infinity","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.96c7ec25.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport PeripheralView from 'peripheral-view';\r\n\r\nconst style = {\r\n  container: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    outline: '1px solid black'\r\n  },\r\n  panel: {\r\n    flex: '1 1 512px',\r\n    height: '512px',\r\n    margin: '32px',\r\n    overflowY: 'auto',\r\n    outline: '1px solid black'\r\n  },\r\n  button: {\r\n    flex: '0 1 10%',\r\n    margin: '16px'\r\n  },\r\n  code: {\r\n    whiteSpace: 'pre-wrap',\r\n    fontSize: '18px'\r\n  }\r\n};\r\n\r\nclass Example extends Component {\r\n  render() {\r\n    const { length, radius, renderMap, renderMapString } = this.props;\r\n\r\n    const code = `<PeripheralView\r\n  ref={r => this.view = r}\r\n  length={${length}}\r\n  radius={${radius}}\r\n  renderMap={${renderMapString}}\r\n/>\r\n\r\n<button onClick={() => this.view.scrollTo(250)}>\r\n  Scroll To 250\r\n</button>`;\r\n\r\n    return (\r\n      <div style={style.container}>\r\n        <div style={style.panel}>\r\n          <code style={style.code}>\r\n            {code}\r\n          </code>\r\n        </div>\r\n        <button style={style.button} onClick={() => this.view.scrollTo(250)}>Scroll To 250</button>\r\n        <div style={style.panel}>\r\n          <PeripheralView\r\n            ref={r => this.view = r}\r\n            length={length}\r\n            radius={radius}\r\n            renderMap={renderMap}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Example;","import React, { Component } from 'react';\n\nimport Example from './Example';\n\nconst style = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'stretch',\n  },\n};\n\nclass App extends Component {\n  componentWillMount() {\n    const [min, max] = [20, 200];\n    const randomHeights = new Array(1000);\n    for(let i = 0; i < randomHeights.length; ++i){\n      randomHeights[i] = Math.round(Math.random() * (max - min)) + min;\n    }\n\n    this.setState({\n      randomHeights\n    });\n  }\n\n  render() {\n    const { randomHeights } = this.state;\n\n    return (\n      <div style={style.container}>\n        <Example\n          length={1000}\n          radius={100}\n          renderMap={i => <div key={i}>{i}</div>}\n          renderMapString={'i => <div key={i}>{i}</div>'}\n        />\n        <Example\n          length={1000}\n          radius={100}\n          renderMap={i => <div key={i} style={{ outline: '1px solid black', height: ((i % 10) + 3) * 10 }}>{i}</div>}\n          renderMapString={`i =>\n    <div key={i} style={{\n      outline: '1px solid black',\n      height: ((i % 10) + 3) * 10\n    }}>\n      {i}\n    </div>\n  `}\n        />\n        <Example\n          length={1000}\n          radius={100}\n          renderMap={i => <div key={i} style={{ outline: '1px solid black', height: randomHeights[i] }}>{i}</div>}\n          renderMapString={`i =>\n    <div key={i} style={{\n      outline: '1px solid black',\n      height: randomHeights[i]\n    }}>\n      {i}\n    </div>\n  `}\n        />\n        <Example\n          length={Infinity}\n          radius={100}\n          renderMap={i => <div key={i}>{i}</div>}\n          renderMapString={'i => <div key={i}>{i}</div>'}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}